version: 0.2

phases:
  install:
    commands:
      - echo Installing dependencies...
      - yum update -y
      - echo "Adding MariaDB repository..."
      - curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash
      - echo "Installing MariaDB server..."
      - yum install -y MariaDB-server
      - echo "Starting MariaDB service..."
      - systemctl start mariadb
      - systemctl enable mariadb

  pre_build:
    commands:
      - echo Configuring MariaDB...
      # MariaDB 초기 설정
      - mysql -u root -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root');"
      - mysql -u root -proot -e "CREATE DATABASE calender;"
      - mysql -u root -proot -e "CREATE USER 'choi'@'localhost' IDENTIFIED BY 'm98dev09tmd@*';"
      - mysql -u root -proot -e "GRANT ALL PRIVILEGES ON calender.* TO 'choi'@'localhost';"
      - mysql -u root -proot -e "FLUSH PRIVILEGES;"
      # 여러 테이블 생성
      - |
        mysql -u choi -pm98dev09tmd@* -D calender <<EOF
        CREATE TABLE IF NOT EXISTS tb_diary (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '고유 번호',
          diary_date DATE NOT NULL COMMENT '다이어리 작성 일자',
          day_of_week VARCHAR(8) NOT NULL COMMENT '다이어리 작성 요일',
          weather VARCHAR(8) NOT NULL COMMENT '날씨',
          temp VARCHAR(8) NOT NULL COMMENT '온도',
          emotion VARCHAR(128) COMMENT '감정',
          content TEXT COMMENT '일기',
          delete_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '삭제 여부 (Y / N)',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '생성 일자',
          UNIQUE KEY date_key (diary_date)
        ) COMMENT='다이어리 정보' CHARSET=utf8mb3;
        
        CREATE TABLE IF NOT EXISTS tb_event (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '고유 번호',
          title VARCHAR(64) NOT NULL COMMENT '타이틀',
          event_date DATETIME NOT NULL COMMENT '이벤트 날짜',
          type VARCHAR(1) NOT NULL COMMENT '타입 (S : 양력, L : 음력)',
          holiday_yn VARCHAR(1) NOT NULL COMMENT '공휴일 여부(Y / N)',
          repeat_yn VARCHAR(1) NOT NULL COMMENT '반복 여부(Y / N)',
          delete_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '삭제 여부 (Y / N)',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '생성 일자'
        ) COMMENT='이벤트 정보' CHARSET=utf8mb3;
        
        CREATE TABLE IF NOT EXISTS tb_event_by_day (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '고유 번호',
          dairy_no INT NOT NULL COMMENT '다이어리 번호',
          event_no INT NOT NULL COMMENT '이벤트 번호',
          success_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '성공 여부 (Y / N)',
          delete_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '삭제 여부 (Y / N)',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '생성 일자',
          UNIQUE KEY date_key (dairy_no, event_no)
        ) COMMENT='일자별 이벤트 정보' CHARSET=utf8mb3;
        
        CREATE TABLE IF NOT EXISTS tb_file (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '프로젝트 고유번호',
          key_no INT NOT NULL COMMENT '부모 키 번호',
          identifier VARCHAR(64) NOT NULL COMMENT '식별자',
          ori_file_name VARCHAR(64) NOT NULL COMMENT '원본 파일 명',
          file_name VARCHAR(64) NOT NULL COMMENT '저장된 파일 명',
          ext VARCHAR(32) NOT NULL COMMENT '파일 타입',
          size VARCHAR(16) NOT NULL COMMENT '파일 크기',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '프로젝트 생성 일자'
        ) COMMENT='파일 정보' CHARSET=utf8mb3;
        
        CREATE TABLE IF NOT EXISTS tb_lunar (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '고유 번호',
          event_no INT NOT NULL COMMENT '이벤트 번호',
          lunar_date DATETIME NOT NULL COMMENT '음력 달력',
          delete_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '삭제 여부 (Y / N)',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '생성 일자'
        ) COMMENT='음력 이벤트 변환 정보' CHARSET=utf8mb3;
        
        CREATE TABLE IF NOT EXISTS tb_target (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '고유 번호',
          title VARCHAR(128) NOT NULL COMMENT '타이틀',
          type VARCHAR(1) NOT NULL COMMENT '타입 (Y : 연간 / M : 월간 / D : 일간)',
          year VARCHAR(4) COMMENT '노출연도',
          month VARCHAR(4) COMMENT '노출 월',
          day VARCHAR(4) COMMENT '노출 일',
          time VARCHAR(6) COMMENT '시간 - TODO만 해당',
          repeat_yn VARCHAR(1) COMMENT '반복 여부(Y / N) - TODO만 해당',
          success_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '성공 여부(Y / N)',
          delete_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '삭제 여부 (Y / N)',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '생성 일자'
        ) COMMENT='목표 정보' CHARSET=utf8mb3;
        
        CREATE TABLE IF NOT EXISTS tb_target_todo_success (
          no INT AUTO_INCREMENT PRIMARY KEY COMMENT '고유 번호',
          diary_no INT NOT NULL COMMENT '다이어리 번호',
          target_no INT NOT NULL COMMENT '타겟 번호',
          success_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '성공 여부(Y / N)',
          delete_yn VARCHAR(1) DEFAULT 'N' NOT NULL COMMENT '삭제 여부 (Y / N)',
          reg_date DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '생성 일자',
          UNIQUE KEY date_key (diary_no, target_no)
        ) COMMENT='일일 목표 성공 여부 테이블' CHARSET=utf8mb3;
        EOF
      - echo Logging in to Amazon ECR...
      - export AWS_DEFAULT_REGION=ap-northeast-2
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 381491842895.dkr.ecr.ap-northeast-2.amazonaws.com
      - REPOSITORY_URI=381491842895.dkr.ecr.ap-northeast-2.amazonaws.com/myapp-ecr
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}

  build:
    commands:
      - echo Building the application with Gradle...
      - ./gradlew clean build -x test --no-daemon
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo Pushing the Docker image to ECR...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo Writing image definitions file...
      - printf '[{"name":"myapp-container","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files: imagedefinitions.json